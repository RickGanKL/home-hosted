#############################################################################
# A minimal rTorrent configuration that provides the basic features
# you want to have in addition to the built-in defaults.
#
# See https://github.com/rakshasa/rtorrent/wiki/CONFIG-Template
# for an up-to-date version.
#############################################################################


## Instance layout (base paths)
method.insert = cfg.basedir,   private|const|string, (cat,"/data/")
method.insert = cfg.incoming,  private|const|string, (cat,(cfg.basedir),"incoming/")
method.insert = cfg.downloads, private|const|string, (cat,(cfg.basedir),"downloads/")
method.insert = cfg.session,   private|const|string, (cat,(cfg.basedir),"session/")
method.insert = cfg.watch,     private|const|string, (cat,(cfg.basedir),"watch/")
method.insert = cfg.logfile,   private|const|string, (cat,"/dev/stdout")


## Create instance directories
execute.throw = sh, -c, (cat,\
    "mkdir -p \"",(cfg.downloads),"\" ",\
    "\"",(cfg.incoming),"\" ",\
    "\"",(cfg.session),"\" ",\
    "\"",(cfg.watch),"/load\" ",\
    "\"",(cfg.watch),"/start\" ")


## Listening port for incoming peer traffic (fixed; you can also randomize it)
network.port_range.set = ${RT_PORT_RANGE}
network.port_random.set = ${RT_PORT_RANDOM}


## Tracker-less torrent and UDP tracker support
dht.mode.set = ${RT_DHT}
dht.port.set = ${RT_DHT_PORT}
protocol.pex.set = ${RT_PEER_EXCHANGE}


## Peer settings
throttle.max_uploads.set = ${RT_MAX_UPLOADS}
throttle.max_uploads.global.set = ${RT_MAX_UPLOADS_GLOBAL}
throttle.max_downloads.global.set = ${RT_MAX_DOWNLOADS_GLOBAL}

throttle.min_peers.normal.set = ${RT_MIN_PEERS}
throttle.max_peers.normal.set = ${RT_MAX_PEERS}
throttle.min_peers.seed.set = ${RT_MIN_PEERS_SEED}
throttle.max_peers.seed.set = ${RT_MAX_PEERS_SEED}
trackers.numwant.set = ${RT_PEERS_DESIRED}

protocol.encryption.set = allow_incoming,try_outgoing,enable_retry
#encryption = allow_incoming,try_outgoing,enable_retry,prefer_plaintext


## Limits for file handle resources, this is optimized for
## an `ulimit` of 1024 (a common default). You MUST leave
## a ceiling of handles reserved for rTorrent's internal needs!
network.http.max_open.set = ${RT_MAX_CONN}
network.max_open_files.set = ${RT_MAX_OPEN_FILES}
network.max_open_sockets.set = ${RT_MAX_OPEN_SOCKETS}


## Memory resource usage (increase if you have a large number of items loaded,
## and/or the available resources to spend)
pieces.memory.max.set = ${RT_MAX_MEM_USAGE}
network.xmlrpc.size_limit.set = 4M


## Basic operational settings (no need to change these)
session.path.set = (cat, (cfg.session))
directory.default.set = (cat, (cfg.incoming))
log.execute = (cat, "/dev/stdout")
#log.xmlrpc = (cat, "/dev/stdout")
execute.nothrow = sh, -c, (cat, "echo >",\
    (session.path), "rtorrent.pid", " ",(system.pid))


## Other operational settings (check & adapt)
encoding.add = ${RT_ENCODING}
system.umask.set = ${RT_UMASK}
system.cwd.set = (directory.default)
network.http.dns_cache_timeout.set = 25
schedule2 = monitor_diskspace, 15, 60, ((close_low_diskspace, ${RT_LOW_DISKSPACE}))
#pieces.hash.on_completion.set = no
#view.sort_current = seeding, greater=d.ratio=
#keys.layout.set = qwerty
#network.http.capath.set = "/etc/ssl/certs"
#network.http.ssl_verify_peer.set = 0
#network.http.ssl_verify_host.set = 0


## Some additional values and commands
method.insert = system.startup_time, value|const, (system.time)
method.insert = d.data_path, simple,\
    "if=(d.is_multi_file),\
        (cat, (d.directory), /),\
        (cat, (d.directory), /, (d.name))"
method.insert = d.session_file, simple, "cat=(session.path), (d.hash), .torrent"


## Watch directories (add more as you like, but use unique schedule names)
## Add torrent
schedule2 = watch_load, 11, 10, ((load.verbose, (cat, (cfg.watch), "load/*.torrent")))
## Add & download straight away
schedule2 = watch_start, 10, 10, ((load.start_verbose, (cat, (cfg.watch), "start/*.torrent")))


## Run the rTorrent process as a daemon in the background
## (and control via XMLRPC sockets)
system.daemon.set = true
scgi_port = 0.0.0.0:5000
#network.scgi.open_local = (cat,(session.path),rpc.socket)
#execute.nothrow = chmod,770,(cat,(session.path),rpc.socket)


## Logging:
##   Levels = critical error warn notice info debug
##   Groups = connection_* dht_* peer_* rpc_* storage_* thread_* tracker_* torrent_*
print = (cat, "Logging to ", (cfg.logfile))
log.open_file = "log", (cfg.logfile)
log.add_output = "${RT_LOG_LEVEL}", "log"
log.add_output = "dht_${RT_LOG_LEVEL}", "log"
log.add_output = "peer_${RT_LOG_LEVEL}", "log"
log.add_output = "socket_${RT_LOG_LEVEL}", "log"
log.add_output = "storage_${RT_LOG_LEVEL}", "log"
log.add_output = "thread_${RT_LOG_LEVEL}", "log"
log.add_output = "tracker_${RT_LOG_LEVEL}", "log"
log.add_output = "torrent_${RT_LOG_LEVEL}", "log"
#log.add_output = "rpc_events", "log"
#log.add_output = "rpc_dump", "log"
#log.add_output = "dht_debug", "log"
#log.add_output = "tracker_debug", "log"

### END of rtorrent.rc ###


###############################################################################


## Global upload and download rate in KiB. "0" for unlimited.
throttle.global_down.max_rate.set_kb = ${RT_DOWNLOAD_RATE}
throttle.global_up.max_rate.set_kb = ${RT_UPLOAD_RATE}


## Check hash for finished torrents.
pieces.hash.on_completion.set = ${RT_CHECK_HASH}


## Move completed downloads (avoiding hash check failures)
## see: https://github.com/rakshasa/rtorrent/wiki/Common-Tasks-in-rTorrent#move-completed-torrents-to-a-fixed-location
method.insert = d.get_finished_dir, simple, "cat=$cfg.downloads=/,$d.custom1="
method.insert = d.get_data_full_path, simple, "branch=((d.is_multi_file)),((cat,(d.directory))),((cat,(d.directory),/,(d.name)))"
method.insert = d.move_to_complete, simple, "execute=mkdir,-p,$argument.1=; execute=cp,-rp,$argument.0=,$argument.1=; d.stop=; d.directory.set=$argument.1=; d.start=;d.save_full_session=; execute=rm, -r, $argument.0="
method.set_key = event.download.finished,move_complete,"d.move_to_complete=$d.get_data_full_path=,$d.get_finished_dir="


## Ratio Handling
## Enable the default ratio group.
ratio.${RT_RATIO}=
## Change the limits, the defaults should be sufficient.
ratio.min.set = ${RT_RATIO_MIN}
ratio.max.set = ${RT_RATIO_MAX}
ratio.upload.set = ${RT_RATIO_UPLOAD}
## Changing the command triggered when the ratio is reached.
## (the default is "d.try_close= ; d.ignore_commands.set=1")
method.set = group.seeding.ratio.command, "d.close= ; d.erase="


###############################################################################


## see: https://github.com/rakshasa/rtorrent/wiki/Performance-Tuning
# # Save all the sessions in every 12 hours instead of the default 20 minutes.
# schedule2 = session_save, 1200, 43200, ((session.save))

# # Prune file status in every 24 hours, this is the default setting.
# #schedule2 = prune_file_status, 3600, 86400, ((system.file_status_cache.prune))

# # Whether to allocate disk space for a new torrent. Default: `0`
# #system.file.allocate.set = 0